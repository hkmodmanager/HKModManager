// Generated for: core 1.0.0.0
// Generated by: Microsoft.JavaScript.NodeApi.Generator 0.41.0.0
/* eslint-disable */


declare module "core" {

	export function registerLogHandler(
		level: string,
		handler: (arg1: string) => void,
	): void;

	export function getAPIVersion(apiPath: string): number;

	export function getGameVersion(apiPath: string): string;

	export function tryFindGamePath(): string | undefined;

	export function getRootPackageProvider(): PackageProviderProxy;

	export interface TaskPropertyChanged { (
		task: TaskItem,
		propertyName: string | undefined,
	): void; }

	export class TaskLogInfo extends unknown {
		message: string;

		color?: string;
	}

	export class TaskItem extends unknown {
		constructor();

		name: string;

		guid: string;

		progress: number;

		readonly startTime: Date;

		endTime: Date;

		onChanged?: TaskPropertyChanged;

		status: TaskItemStatus;

		readonly isSuccess: boolean;

		readonly isFailed: boolean;

		readonly isRunning: boolean;

		isHidden: boolean;

		readonly logCount: number;

		getLogAt(id: number): TaskLogInfo;

		log(msg: string): void;

		logError(msg: string): void;

		logWarn(msg: string): void;

		print(
			msg: string,
			level: unknown,
		): void;

		getRunningTime(): number;
	}

	export enum TaskItemStatus {
		Idle = 0,

		Running = 1,

		Success = 2,

		Fail = 3,
	}

	export class LegacyLocalModInfo extends unknown {
		name: string;

		version: string;

		install: number;

		path: string;

		modinfo: LegacyModInfoFull;
	}

	export class LegacyModCollection extends unknown {
		constructor();

		addMod(mod: LegacyModInfoFull): void;
	}

	export class LegacyModInfoFull extends unknown {
		name: string;

		version: string;

		desc: string;

		displayName?: string;

		link?: string;

		dependencies: string[];

		integrations: string[];

		repository?: string;

		tags: string[];

		authors: string[];

		date?: string;
	}

	export function initJSAPI(api: JSAPI): void;

	export function onSettingChanged(): void;

	export class JSAPI extends unknown {
		getModStorePath: () => string;

		getConfigPath: () => string;

		parseModLinks: (arg1: string) => Promise<LegacyModCollection>;

		parseAPILink: (arg1: string) => Promise<LegacyModInfoFull>;
	}

	export class LocalPackageProxy extends unknown {
		constructor();

		readonly info: PackageDisplay;

		readonly installPath: string;

		enabled: boolean;

		readonly installDate: number;

		check(): LocalPackageProxy;

		uninstall(): void;

		static getMod(name: string): LocalPackageProxy | undefined;

		static getAllMods(): Promise<LocalPackageProxy[]>;
	}

	export class PackageDisplay extends unknown {
		constructor();

		readonly name: string;

		readonly description: string;

		readonly displayName: string;

		readonly version: string;

		readonly authors: string[];

		readonly tags: string[];

		readonly repository?: string;

		readonly date: number;

		readonly owner: string;

		readonly icon: string;

		readonly dependencies: string[];

		readonly allowToggle: boolean;

		readonly allowInstall: boolean;

		readonly allowUninstall: boolean;

		check(): PackageDisplay;

		install(): Promise<void>;
	}

	export class PackageProviderProxy extends unknown {
		constructor();

		readonly name: string;

		static getRoot(): PackageProviderProxy;

		getAllPackages(onlyTop: boolean): PackageDisplay[];

		getPackage(name: string): PackageDisplay | undefined;
	}

	export namespace JSTaskManager {
		export const taskCount: number;

		export function getTaskAt(id: number): TaskItem;

		export function startTask(task: TaskItem): void;

		export function getTask(guid: string): TaskItem | undefined;

		export function getTasksProgress(): number;
	}
}
